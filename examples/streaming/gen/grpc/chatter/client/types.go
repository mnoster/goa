// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter gRPC client types
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package client

import (
	goa "goa.design/goa"
	chattersvcviews "goa.design/goa/examples/streaming/gen/chatter/views"
	"goa.design/goa/examples/streaming/gen/grpc/chatter/pb"
)

// NewLoginRequest builds the gRPC request type from the payload of the "login"
// endpoint of the "chatter" service.
func NewLoginRequest() *pb.LoginRequest {
	message := &pb.LoginRequest{}
	return message
}

// NewLoginResponse builds the result type of the "login" endpoint of the
// "chatter" service from the gRPC response type.
func NewLoginResponse(message *pb.LoginResponse) string {
	result := message.Field
	return result
}

func NewEchoerResponse(v *pb.EchoerResponse) string {
	result := v.Field
	return result
}

func NewEchoerStreamingRequest(spayload string) *pb.EchoerStreamingRequest {
	v := &pb.EchoerStreamingRequest{}
	v.Field = spayload
	return v
}

func NewListenerStreamingRequest(spayload string) *pb.ListenerStreamingRequest {
	v := &pb.ListenerStreamingRequest{}
	v.Field = spayload
	return v
}

func NewChatSummaryCollection(v *pb.ChatSummaryCollection) chattersvcviews.ChatSummaryCollectionView {
	vresult := make([]*chattersvcviews.ChatSummaryView, len(v.Field))
	for i, val := range v.Field {
		vresult[i] = &chattersvcviews.ChatSummaryView{
			Message: &val.Message_,
			SentAt:  &val.SentAt,
		}
		lengthptr := int(val.Length)
		vresult[i].Length = &lengthptr
	}
	return vresult
}

func NewSummaryStreamingRequest(spayload string) *pb.SummaryStreamingRequest {
	v := &pb.SummaryStreamingRequest{}
	v.Field = spayload
	return v
}

// NewHistoryRequest builds the gRPC request type from the payload of the
// "history" endpoint of the "chatter" service.
func NewHistoryRequest() *pb.HistoryRequest {
	message := &pb.HistoryRequest{}
	return message
}

func NewChatSummaryView(v *pb.HistoryResponse) *chattersvcviews.ChatSummaryView {
	vresult := &chattersvcviews.ChatSummaryView{
		Message: &v.Message_,
		SentAt:  &v.SentAt,
	}
	lengthptr := int(v.Length)
	vresult.Length = &lengthptr
	return vresult
}

// ValidateChatSummaryCollection runs the validations defined on
// ChatSummaryCollection.
func ValidateChatSummaryCollection(message *pb.ChatSummaryCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateChatSummary(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChatSummary runs the validations defined on ChatSummary.
func ValidateChatSummary(message *pb.ChatSummary) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}

// ValidateHistoryResponse runs the validations defined on HistoryResponse.
func ValidateHistoryResponse(message *pb.HistoryResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}
